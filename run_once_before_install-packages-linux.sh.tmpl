{{ if (eq .chezmoi.os "linux") -}}
#!/bin/bash
set -eu

### Settings and versions
NERD_FONT_VERSION=3.4.0
NERD_FONT_FAMILIES=(
  "FiraCode"
  "FiraMono"
  "Hack"
  "Hasklig"
  "JetBrainsMono"
  "Monoid"
  "RobotoMono"
  "SpaceMono"
)
NERD_FONT_URL="https://github.com/ryanoasis/nerd-fonts/releases/download/"

USER_FONT_DIR="$HOME/.local/share/fonts"

TOPGRADE_VERSION=16.0.3
GITHUB_CREDENTIAL_VERSION=2.2.0

# TODO move to chezmoi data
APPIMAGE_DIR="$HOME/Applications"

YUM_GPG_KEYS=(
  "https://download.docker.com/linux/fedora/gpg"
  "https://packages.microsoft.com/keys/microsoft.asc"
  "https://brave-browser-rpm-release.s3.brave.com/brave-core.asc"
)

CHEZMOI_SOURCE_DIR="{{ .chezmoi.sourceDir }}"
### -------------------

TMP_DIR=$(mktemp -d)
trap 'rm -rf $TMP_DIR' EXIT

## Flatpak installation. Handles Pakfile
install_flatpaks() {
  echo "Installing flatpaks"
  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

  local flatpaks=(
{{ joinPath .chezmoi.sourceDir "Pakfile" | include }}
{{ joinPath .chezmoi.sourceDir "Pakfile.pers.asc" | include | decrypt -}}
  )

  # on the first run you need to reinstal fedora sourced packages
  #flatpak install -y --reinstall flathub "${flatpaks[@]}"
  flatpak install -y flathub "${flatpaks[@]}"
}

## Cleaning preinstalled flatpaks (Kinoite)
remove_flatpaks() {
  echo "Removing flatpaks"
  # preinstalled Kinoite flatpaks I don't use
  local flatpaks=(
    org.kde.kmahjongg
    org.kde.kmines
    org.kde.kolourpaint
    org.kde.krdc
  )

  local flatpaks_list="$(flatpak list --columns=application)"
  for flatpak in "${flatpaks[@]}"; do
    if echo "$flatpaks_list" | grep -q "$flatpak"; then
      flatpak uninstall --delete-data -y "${flatpaks[@]}"
      break
    fi
  done 
}

## Installing experimental appimaged in go
## daemon itself is an appimage, but right now its CI build, so we need to track latest
## like it says in the README https://github.com/probonopd/go-appimage/blob/master/src/appimaged/README.md
install_appimaged() {
  # if $APPIMAGE_DIR/appimaged-*.AppImage exists, skip
  if [ -f $APPIMAGE_DIR/appimaged-*.AppImage ]; then
    return
  fi
  wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "appimaged-.*-x86_64.AppImage" | head -n 1 | cut -d '"' -f 2) -P $APPIMAGE_DIR
  chmod +x $APPIMAGE_DIR/appimaged-*.AppImage
  echo "launching appimaged for the first time"
  $APPIMAGE_DIR/appimaged-*.AppImage -q
}

## AppImage installation. Handles Appfile
install_appimages() {
  echo "Installing AppImages"
  mkdir -p $APPIMAGE_DIR
  install_appimaged
  local appimages=(
    {{ joinPath .chezmoi.sourceDir "Appfile" | include }}
  )

  for appimage in "${appimages[@]}"; do
    if [ -f $APPIMAGE_DIR/$(basename $appimage) ]; then
      continue
    fi
    echo "Downloading $appimage"
    curl -L $appimage -o $APPIMAGE_DIR/$(basename $appimage)
    chmod +x $APPIMAGE_DIR/$(basename $appimage)
  done
}

## RPM ostree layering. Handles Rpmfile and yum.repos.d
install_ostree() {
  echo "Installing ostree packages"
  local rpmfile=(
    {{ joinPath .chezmoi.sourceDir "Rpmfile.pers.asc" | include | decrypt -}}
    {{ joinPath .chezmoi.sourceDir "Rpmfile" | include }}
#    {{ joinPath .chezmoi.sourceDir "Rpmfile.40" | include }}
  )

  # setting up non-rh repos
  echo "Setting up yum repos"
  for repo in $(ls {{ .chezmoi.sourceDir }}/yum.repos.d); do
    if [ -f /etc/yum.repos.d/$repo ]; then
      continue
    fi
    echo "Copying $repo to /etc/yum.repos.d"
    sudo cp "{{ .chezmoi.sourceDir }}/yum.repos.d/$repo" /etc/yum.repos.d/
  done
  rpm-ostree install -y --allow-inactive --idempotent \
  "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm" \
  "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"

  sudo rpm-ostree apply-live || true
  rpm-ostree update

  # setting up gpg keys
  echo "Setting up gpg keys"
  for key in "${YUM_GPG_KEYS[@]}"; do
    if [ -f "/etc/pki/rpm-gpg/$(basename $key)" ]; then
      continue
    fi
    echo "Downloading $key"
    sudo curl -L $key -o "/etc/pki/rpm-gpg/$(basename $key)"
  done

  # TODO: check if packages are already installed
  # thats non-trivial because of the ostree nature. You have booted deployment
  # and you could have pending deployments. So you can't just check the current
  # rpm-ostree status provides json output, but it's not easy to parse. Its solvable though
  # logic should be as following:
  # - check if there are pending deployments
  # - if there are, check if the packages are already installed
  # - if not, install them
  # - if there are no pending deployments, check if the packages are installed in boot deployment
  # probably we should handle only additive changes, since blind chezmoi apply could silently remove packages
  # installed by the user but not versioned in chezmoi
  if rpm-ostree status -bq; then
    # assemble all rpms plus the downloaded ones
    rpms_files="${rpmfile[@]}"
    echo "Installing ostree packages: $rpms_files"

    rpm-ostree install --allow-inactive --idempotent -y $rpms_files
  fi

  # this makes upgrade hella slow, disabled for now
  # if command -v kdeconnect-cli &> /dev/null; then
  #   echo "Removing preinstalled packages"
  #   rpm-ostree override remove \
  #     kde-connect \
  #     kde-connect-libs \
  #     kdeconnectd \
  #     firefox \
  #     firefox-langpacks
  # fi

  echo "overriding some base multimedia packages"
  # see https://rpmfusion.org/Howto/Multimedia
  # https://rpmfusion.org/Howto/OSTree?highlight=%28%5CbCategoryHowto%5Cb%29#Installation
  rpm-ostree override replace ffpmeg-free ffmpeg --experimental --from repo=rpmfusion-nonfree

  echo "Applying ostree changes (best effort)"
  sudo rpm-ostree apply-live || true
}

## Toolbox setup. Just containers creation
## TODO: deprecated in favor of distrobox
setup_toolbx() {
  echo "Setting up toolbox"
  if ! toolbox list -c | grep -q "ubuntu-toolbox-24.04"; then
    toolbox -y create --distro ubuntu --release 24.04
  fi
  if ! toolbox list -c | grep -q "fedora-toolbox-41"; then
    toolbox -y create --distro fedora --release 41
  fi
}

install_nerd_fonts() {
  echo "Installing Nerd Fonts"
  local nerd_fonts_dir="$USER_FONT_DIR/NerdFonts"
  mkdir -p $nerd_fonts_dir
  echo "Installing Nerd Fonts: ${NERD_FONT_FAMILIES[@]}"
  for family in "${NERD_FONT_FAMILIES[@]}"; do
    if [ -d $nerd_fonts_dir/$family ]; then
      echo "Nerd Font $family already exists, skipping"
      continue
    fi
    curl -L -o $TMP_DIR/$family.tar.xz $NERD_FONT_URL/v$NERD_FONT_VERSION/$family.tar.xz
    mkdir -p $nerd_fonts_dir/$family
    tar -xvf $TMP_DIR/$family.tar.xz -C $nerd_fonts_dir/$family
  done
}

install_nvs() {
  if [ -n "${NVS_HOME-}" ] && [ ! -d "${NVS_HOME-}" ]; then
    echo "NVS_HOME is set, but nvs is not installed, installing"
    git clone https://github.com/jasongin/nvs "${NVS_HOME-}"
  fi
}

setup_i2c() {
  # creating i2c group
  if ! getent group i2c &>/dev/null; then
    sudo groupadd i2c
  fi
  # adding current user to i2c group
  if ! groups | grep -q i2c; then
    sudo usermod -aG i2c $USER
  fi

  # adding udev rule for i2c
  # /usr/share/ddcutil/data/60-ddcutil-i2c.rules
  if [ ! -f /etc/udev/rules.d/60-ddcutil-i2c.rules ]; then
    echo "Adding udev rule for i2c"
    sudo cp $CHEZMOI_SOURCE_DIR/.udev.rules/60-ddcutil-i2c.rules /etc/udev/rules.d/
  fi
}

## Fonts installation. 
## Only for Linux. Brewfile handles macos fonts
install_fonts() {
  install_nerd_fonts
  echo "Updating fonts cache"
  fc-cache -v $HOME/.local/share/fonts || true
}

## CA certificates installation using step
install_ca() {
  if ! command -v step &> /dev/null; then
    echo "Downloading step"
    curl -L https://github.com/smallstep/cli/releases/download/v0.27.4/step_linux_0.27.4_amd64.tar.gz -o $TMP_DIR/step.tar.gz
    tar -xf $TMP_DIR/step.tar.gz -C $TMP_DIR --strip-components=1
    cp $TMP_DIR/bin/step ~/bin/
  fi

  if [ -d $HOME/.step ]; then
    echo "Installing CA certificates"
    echo ".step exists, skipping CA bootstrap"
    return
  fi
  
  step ca bootstrap --ca-url {{ .caUrl }} --fingerprint {{ .caUrlFingerprint }} --install
}

## Topgrade installation
install_topgrade() {
  if ! command -v topgrade &> /dev/null; then
    echo "Downloading topgrade"
    mkdir -p /tmp/topgrade
    curl -L https://github.com/topgrade-rs/topgrade/releases/download/v$TOPGRADE_VERSION/topgrade-v$TOPGRADE_VERSION-x86_64-unknown-linux-musl.tar.gz -o /tmp/topgrade/topgrade.tar.gz
    tar -xf /tmp/topgrade/topgrade.tar.gz -C /tmp/topgrade
    cp /tmp/topgrade/topgrade ~/bin/
  fi
}

install_git_credential_github() {
  if [ ! -f ~/bin/git-credential-github ]; then
    echo "Downloading git-credential-github"
    # Download and extract git-credential-github
    # TODO use TMP_DIR
    mkdir -p /tmp/git-credential-github
    curl -L https://github.com/Xgames123/git-credential-github/releases/download/$GITHUB_CREDENTIAL_VERSION/git-credential-github-$GITHUB_CREDENTIAL_VERSION.deb -o /tmp/git-credential-github/git-credential-github.deb
    ar x /tmp/git-credential-github/git-credential-github.deb --output /tmp/git-credential-github
    tar -xf /tmp/git-credential-github/data.tar.xz -C /tmp/git-credential-github
    cp /tmp/git-credential-github/usr/bin/git-credential-github ~/bin/
    trap 'rm -rf /tmp/git-credential-github' EXIT
  fi
}

install_ddcci-plasmoid() {
  # if pipx ddcci-plasmoid is not installed, install it
  if ! command -v ddcci_plasmoid_backend &> /dev/null; then
    echo "Installing ddcci-plasmoid-backend"
    pipx install ddcci-plasmoid-backend
  fi
  # kpackagetool6 -s de.davidhi.ddcci-brightness
  # if plasmoid is not installed, install it
  if ! kpackagetool6 --list -t Plasma/Applet | grep -q de.davidhi.ddcci-brightness; then
    echo "Installing ddcci-brightness plasmoid"
    git clone https://github.com/davidhi7/ddcci-plasmoid.git $TMP_DIR/ddcci-plasmoid
    kpackagetool6 -t Plasma/Applet -i $TMP_DIR/ddcci-plasmoid/plasmoid
    echo "Backend executable command must be set to ~/.local/bin/ddcci_plasmoid_backend (without python3 or anything else before)."
  fi
}

setup_modprobe_d() {
  # cycle through $CHEZMOI_SOURCE_DIR/.modprobe and copy to /etc/modprobe.d if mtime differs
  for modprobe in $(ls $CHEZMOI_SOURCE_DIR/.modprobe); do
    if [ -f /etc/modprobe.d/$modprobe ]; then
      if [ $(stat -c %Y $CHEZMOI_SOURCE_DIR/.modprobe/$modprobe) -eq $(stat -c %Y /etc/modprobe.d/$modprobe) ]; then
        continue
      fi
    fi
    echo "Copying $modprobe to /etc/modprobe.d"
    sudo cp $CHEZMOI_SOURCE_DIR/.modprobe/$modprobe /etc/modprobe.d/
  done
}

install_startship_prompt() {
  if [ ! -f ~/.local/bin/starship ]; then
    echo "Installing starship prompt"
    curl -sS https://starship.rs/install.sh | sh -s -- -y -b ~/.local/bin
  fi
}

# ask for sudo password to cache it early in case we need it later
# not a gurantee, but saves time in some cases
sudo echo "Caching sudo password"

{{ if (eq .chezmoi.osRelease.variantID "kinoite") -}}
## Kinoite specific setup
echo "Installing Kinoite environment"
install_ostree
remove_flatpaks
install_flatpaks
install_appimages
setup_toolbx
# TODO: reestablish CA infra
#install_ca
install_fonts
install_topgrade
install_git_credential_github
setup_i2c
install_ddcci-plasmoid
setup_modprobe_d
install_startship_prompt
install_nvs

## End of Kinoite specific setup
{{ end -}}

{{ end -}}
