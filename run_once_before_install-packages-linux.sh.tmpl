{{ if (eq .chezmoi.os "linux") -}}
#!/bin/bash
set -eu

RPMS=(
  "https://github.com/TheAssassin/AppImageLauncher/releases/download/v2.2.0/appimagelauncher-2.2.0-travis995.0f91801.x86_64.rpm"
  "https://dl.smallstep.com/cli/docs-ca-install/latest/step-cli_amd64.rpm"
  # "https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm"
  # "https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm"
  # "https://github.com/rpmsphere/noarch/raw/master/r/rpmsphere-release-38-1.noarch.rpm"
)

install_flatpaks() {
  echo "Installing flatpaks"
  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

  local flatpaks=(
{{ joinPath .chezmoi.sourceDir "Pakfile" | include }}
{{ joinPath .chezmoi.sourceDir "Pakfile.pers.asc" | include | decrypt }}
  )

  flatpak install -y flathub "${flatpaks[@]}"
}

remove_flatpaks() {
  echo "Removing flatpaks"
  local flatpaks=(
    org.kde.okular
    org.kde.kmahjongg
    org.kde.kmines
    org.kde.kolourpaint
    org.kde.krdc
  )

  local flatpaks_list="$(flatpak list --columns=application)"
  for flatpak in "${flatpaks[@]}"; do
    if echo "$flatpaks_list" | grep -q "$flatpak"; then
      flatpak uninstall --delete-data -y "${flatpaks[@]}"
      break
    fi
  done 
}

install_ostree() {
  echo "Installing ostree packages"
  # setting up non-rh repos
  # https://code.visualstudio.com/docs/setup/linux#_rhel-fedora-and-centos-based-distributions
  if [ ! -f /etc/pki/rpm-gpg/microsoft.asc ]; then
    curl -o /etc/pki/rpm-gpg/microsoft.asc https://packages.microsoft.com/keys/microsoft.asc
  fi
  if [ ! -f /etc/yum.repos.d/vscode.repo ]; then
    echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" | sudo tee /etc/yum.repos.d/vscode.repo > /dev/null
  fi

  rpm-ostree install --idempotent -y \
    {{- joinPath .chezmoi.sourceDir "Rpmfile.pers.asc" | include | decrypt -}}
    binutils \
    code \
    ddccontrol ddccontrol-gtk \
    etckeeper \
    ffmpeg-free \
    gh \
    pipx \
    podman-compose \
    podman-docker \
    python3-pip \
    snapper \
    syncthing \
    tealdeer \
    vim \
    wl-clipboard \
    zsh

  # TODO: check if packages are already installed
  if rpm-ostree status -bq; then
    mkdir -p $HOME/.cache/chezmoi/rpms
    # download from RPMS to cache folder if not exists
    for rpm in "${RPMS[@]}"; do
      if [ ! -f $HOME/.cache/chezmoi/rpms/$(basename $rpm) ]; then
        curl -L $rpm -o $HOME/.cache/chezmoi/rpms/$(basename $rpm)
      fi
    done

    rpms_files=""
    for rpm in "${RPMS[@]}"; do
      rpms_files="$rpms_files $HOME/.cache/chezmoi/rpms/$(basename $rpm)"
    done

    rpm-ostree install --idempotent -y \
      $rpms_files
  fi

  if command -v kdeconnect-cli &> /dev/null; then
    echo "Removing kde-connect packages"
    rpm-ostree override remove \
      kde-connect \
      kde-connect-libs \
      kdeconnectd
  fi

  echo "Applying ostree changes (best effort)"
  sudo rpm-ostree apply-live || true
}

setup_toolbx() {
  echo "Setting up toolbox"
  if ! toolbox list -c | grep -q "ubuntu-toolbox-23.10"; then
    toolbox create --distro ubuntu --release 23.10
  fi
  if ! toolbox list -c | grep -q "fedora-toolbox-40"; then
    toolbox create --distro fedora --release 40
  fi
}

install_fonts() {
  echo "Installing fonts"
  mkdir -p $HOME/.local/share/fonts

  local fonts=(
    {{- joinPath .chezmoi.sourceDir "fonts" | include -}}
  )

  fc-cache -v $HOME/.local/share/fonts
}

{{ if (eq .chezmoi.osRelease.variantID "kinoite") -}}
echo "Installing Kinoite environment"
install_ostree
remove_flatpaks
install_flatpaks
setup_toolbx

if [ ! -f ~/bin/git-credential-github ]; then
  echo "Downloading git-credential-github"
  # Download and extract git-credential-github
  mkdir -p /tmp/git-credential-github
  curl -L https://github.com/Xgames123/git-credential-github/releases/download/2.2.0/git-credential-github-2.2.0.deb -o /tmp/git-credential-github/git-credential-github-2.2.0.deb
  ar x /tmp/git-credential-github/git-credential-github-2.2.0.deb --output /tmp/git-credential-github
  tar -xf /tmp/git-credential-github/data.tar.xz -C /tmp/git-credential-github
  cp /tmp/git-credential-github/usr/bin/git-credential-github ~/bin/
fi

if ! command -v topgrade &> /dev/null; then
  echo "Downloading topgrade"
  mkdir -p /tmp/topgrade
  curl -L https://github.com/topgrade-rs/topgrade/releases/download/v14.0.1/topgrade-v14.0.1-x86_64-unknown-linux-musl.tar.gz -o /tmp/topgrade/topgrade.tar.gz
  tar -xf /tmp/topgrade/topgrade.tar.gz -C /tmp/topgrade
  cp /tmp/topgrade/topgrade ~/bin/
fi

{{ end -}}

{{ end -}}
